<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/home/bzale/Desktop/NSI/projets/SGBD/sgbd/bibliotheque.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="2118"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,9:mainEmprunter"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Appartient_A" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="84"/><column index="2" value="51"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Auteurs" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="66"/><column index="2" value="83"/><column index="3" value="105"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Categories" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="84"/><column index="2" value="101"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Ecrit" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="66"/><column index="2" value="51"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Emprunter" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="96"/><column index="2" value="81"/><column index="3" value="77"/><column index="4" value="51"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Livres" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="51"/><column index="2" value="201"/><column index="3" value="113"/><column index="4" value="84"/><column index="5" value="66"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">CREATE TABLE Auteurs (
    id_auteur INTEGER PRIMARY KEY,
    nom_auteur TEXT NOT NULL, -- il se trouve que TEXT permet d'utiliser seulement des lettres (pas de chiffres...)
    prenom_auteur TEXT NOT NULL
);

CREATE TABLE Categories (
    id_categorie INTEGER PRIMARY KEY,
    nom_categorie TEXT UNIQUE NOT NULL
);

CREATE TABLE Livres (
    id_livre INTEGER PRIMARY KEY,
    titre TEXT NOT NULL,
    date_publication DATE,
    id_categorie INTEGER,
    id_auteur INTEGER,
    FOREIGN KEY (id_categorie) REFERENCES Categories(id_categorie),
    FOREIGN KEY (id_auteur) REFERENCES Auteurs(id_auteur)
);

CREATE TABLE Membres (
    id_membre INTEGER PRIMARY KEY,
    nom_membre TEXT NOT NULL,
    prenom_membre TEXT NOT NULL,
    email_membre TEXT UNIQUE NOT NULL
);

CREATE TABLE Emprunter (
    date_emprunt DATE NOT NULL,
    date_retour DATE,
    id_membre INTEGER,
    id_livre INTEGER,
    PRIMARY KEY (id_membre, id_livre),
    FOREIGN KEY (id_membre) REFERENCES Membres(id_membre),
    FOREIGN KEY (id_livre) REFERENCES Livres(id_livre),
    CHECK (date_retour IS NULL OR date_retour &gt;= date_emprunt)
);

CREATE TABLE Ecrit (
    id_auteur INTEGER,
    id_livre INTEGER,
    PRIMARY KEY (id_auteur, id_livre),
    FOREIGN KEY (id_auteur) REFERENCES Auteurs(id_auteur),
    FOREIGN KEY (id_livre) REFERENCES Livres(id_livre)
);

CREATE TABLE Appartient_A (
    id_categorie INTEGER,
    id_livre INTEGER,
    PRIMARY KEY (id_categorie, id_livre),
    FOREIGN KEY (id_categorie) REFERENCES Categories(id_categorie),
    FOREIGN KEY (id_livre) REFERENCES Livres(id_livre)
);

</sql><sql name="SQL 2">INSERT INTO Auteurs (id_auteur, nom_auteur, prenom_auteur) VALUES
(1, 'Hugo', 'Victor'),
(2, 'Verne', 'Jules'),
(3, 'Dumas', 'Alexandre'),
(4, 'Zola', 'Émile');

INSERT INTO Categories (id_categorie, nom_categorie) VALUES
(1, 'Classique'),
(2, 'Science-fiction'),
(3, 'Histoire'),
(4, 'Roman');

INSERT INTO Livres (id_livre, titre, date_publication, id_categorie, id_auteur) VALUES
(1, 'Les Misérables', '1862-01-01', 1, 1),   
(2, 'Vingt Mille Lieues sous les mers', '1870-01-01', 2, 2),
(3, 'Les Trois Mousquetaires', '1844-01-01', 1, 3),  
(4, 'Nana', '1880-01-01', 4, 4); 

INSERT INTO Membres (id_membre, nom_membre, prenom_membre, email_membre) VALUES
(1, 'Dupont', 'Jean', 'jean.dupont@example.com'),
(2, 'Martin', 'Marie', 'marie.martin@example.com'),
(3, 'Durand', 'Pierre', 'pierre.durand@example.com'),
(4, 'Lefevre', 'Sophie', 'sophie.lefevre@example.com');

INSERT INTO Emprunter (date_emprunt, date_retour, id_membre, id_livre) VALUES
('2024-01-10', '2024-02-10', 1, 1),   
('2024-03-01', NULL, 2, 2),           
('2024-01-15', '2024-02-15', 3, 3),   
('2024-04-20', '2024-05-20', 4, 4);   

INSERT INTO Ecrit (id_auteur, id_livre) VALUES
(1, 1), 
(2, 2), 
(3, 3), 
(4, 4); 

INSERT INTO Appartient_A (id_categorie, id_livre) VALUES
(1, 1),  
(2, 2),  
(1, 3),  
(4, 4);  

</sql><sql name="SQL 3">-- 1. Lister tous les livres avec leur auteur 
SELECT Livres.titre, Auteurs.nom_auteur, Auteurs.prenom_auteur
FROM Livres
JOIN Auteurs ON Livres.id_auteur = Auteurs.id_auteur;

-- 2. Lister tous les emprunts, en incluant le nom du membre et le titre du livre ainsi que les dates d'emprunt et retour
SELECT Emprunter.date_emprunt, Emprunter.date_retour, Membres.nom_membre, Membres.prenom_membre, Livres.titre
FROM Emprunter
JOIN Membres ON Emprunter.id_membre = Membres.id_membre
JOIN Livres ON Emprunter.id_livre = Livres.id_livre;

-- 3. Afficher les livres appartenant à la catégorie &quot;Sciences&quot; avec titre et date de publication
SELECT Livres.titre, Livres.date_publication
FROM Livres
JOIN Categories ON Livres.id_categorie = Categories.id_categorie
WHERE Categories.nom_categorie like 'Science%';

-- 4. Afficher le nombre de livres empruntés par chaque membre
SELECT Membres.nom_membre, Membres.prenom_membre, COUNT(Emprunter.id_livre) AS nombre_emprunts
FROM Membres
LEFT JOIN Emprunter ON Membres.id_membre = Emprunter.id_membre -- LEFT JOIN pour inclure ceux qui n'ont pas fait d'emprunts
GROUP BY Membres.id_membre;

-- 5. Lister les auteurs ayant écrit plus de 3 livres (selon les livres dans la db)
SELECT Auteurs.nom_auteur, Auteurs.prenom_auteur, COUNT(Ecrit.id_livre) AS nombre_livres
FROM Auteurs
JOIN Ecrit ON Auteurs.id_auteur = Ecrit.id_auteur
GROUP BY Auteurs.id_auteur
HAVING COUNT(Ecrit.id_livre) &gt; 3;

-- 6. Lister les livre non emrpuntés avec titre et date de publication
SELECT Livres.titre, Livres.date_publication
FROM Livres
LEFT JOIN Emprunter ON Livres.id_livre = Emprunter.id_livre -- LEFT JOIN pour aussi lister les livres non empruntés
WHERE Emprunter.id_livre IS NULL;

-- 7. Afficher les détails de l'emprunt du livre d'id 7
SELECT Emprunter.date_emprunt, Emprunter.date_retour, Membres.nom_membre, Membres.prenom_membre
FROM Emprunter
JOIN Membres ON Emprunter.id_membre = Membres.id_membre
WHERE Emprunter.id_livre = 7;

-- 8. Lister les livres avec leur(s) catégorie(s) triés par date de publication
SELECT Livres.titre, Categories.nom_categorie, Livres.date_publication
FROM Livres
JOIN Categories ON Livres.id_categorie = Categories.id_categorie
ORDER BY Livres.date_publication;

-- 9. Compter le nombre de livres par catégorie
SELECT Categories.nom_categorie, COUNT(Livres.id_livre) AS nombre_livres
FROM Categories
LEFT JOIN Livres ON Categories.id_categorie = Livres.id_categorie -- LEFT JOIN pour lister toutes les catégories (celles qui n'ont pas de livres aussi)
GROUP BY Categories.id_categorie;

-- 10. Lister les livres et auteur(s) associé(s)
SELECT Livres.titre, Auteurs.nom_auteur, Auteurs.prenom_auteur
FROM Livres
JOIN Ecrit ON Livres.id_livre = Ecrit.id_livre
JOIN Auteurs ON Ecrit.id_auteur = Auteurs.id_auteur;

-- 11. Afficher les livres qui ont été empruntés entre le 2024-01-01 et le 2024-06-31 (avec date d'emprunt et titre)
SELECT Livres.titre, Emprunter.date_emprunt
FROM Livres
JOIN Emprunter ON Livres.id_livre = Emprunter.id_livre
WHERE Emprunter.date_emprunt BETWEEN '2024-01-01' AND '2024-06-30';

-- 12. Lister les membres n'ayant jamais emprunté des livres
SELECT Membres.nom_membre, Membres.prenom_membre
FROM Membres
LEFT JOIN Emprunter ON Membres.id_membre = Emprunter.id_membre -- LEFT JOIN pour aussi inclure tous les membres n'ayant pas emprunté de livres
WHERE Emprunter.id_membre IS NULL;
</sql><current_tab id="2"/></tab_sql></sqlb_project>
